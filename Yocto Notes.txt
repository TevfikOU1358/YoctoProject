Embedded linux 4 temel bileşenden oluşur.
1)Bootloader
2)Toolchain
33)Kernel
4)Root FileSystem

Yocto project: to help developers create their own custom linux distrubutions

Input: Kernel Configuration, Hardware Name, Package/Binaries
Output:Linux Kernel, Bootloader, Device Tree, Root filesystem, Toolchain


Here are the packages needed to build an image on a headless system with a supported Ubuntu or Debian Linux distribution:

$ sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev python3-subunit mesa-common-dev zstd liblz4-tool file locales libacl1
$ sudo locale-gen en_US.UTF-8


Poky----------------------
Poky is a refference/example distrubition of yocto project


Metadata:A set of data
Medata is collection of 
-Configuration file(.conf)
-Recipes(.bb and ..bbappend)
-Classes(.bbclass)
-Includes(.inc)


BitBake is a build tool that is commonly used in the Yocto Project, an open-source collaboration project that helps developers create custom Linux-based systems for embedded products. 
BitBake is designed to automate the process of building and packaging software components, 
allowing developers to create custom Linux distributions tailored to the specific requirements of their embedded systems



git clone git://git.yoctoproject.org/poky
cd poky
git checkout zeus

source oe-init-build-env

tevfikulu13@ubuntu:~/tevfik_source/build$ echo $PATH 
/home/tevfikulu13/tevfik_source/poky/scripts:(script path added)

Now build linux distrubution: 
bitbake core-image-minimal



Start quemu using yocto generated images
runqemu <machine> <zimage> <filesystem>

<machine>:(qemuarm, qemux86, qemux86-64)


runqemu -h :(help)

runqemu qemux86-64 core-image-minimal


-----------------Build and run qemu arm
the default are set to build for a qemux86 target
edit ./build/conf/local.conf
MACHINR = "qemuarm"

$runqemu core-image-minimal

to run inNo graphic mode:
$runqemu core-image-minimal nographic



-----------------------------------------
add lsusb to yocto image


to add particular package in your root file system
open your local.conf file and recipe nbame below 
IMAGE_INSTALL += "recipe-name"
Ex: IMAGE_INSTALL += "usbutils" for lsusb or IMAGE_INSTALL_append = "usbutils"(recommended)
$bitbake core-image-minimal
------------------------------------------
conf
-----------

When you run source poky/oe-init-build-env, it will create a "build" folder in that directory
Inside this build folder, it will create "conf" folder which contains two files:

1. local.conf
2. bblayers.conf

local.conf
-------------

Configures almost every aspect of the build system
Contains local user settings

MACHINE: The machine the target is built for
	Eg: MACHINE = "qemux86-64"

DL_DIR: Where to place downloads
	During a first build the system will download many different source code tarballs,from various 
	upstream projects.These are all stored in DL_DIR
	The default is a downloads directory under TOPDIR which is the build directory

TMP_DIR:  Where to place the build output
	  This option specifies where the bulk of the building work should be done and
	  where BitBake should place its temporary files(source extraction, compilation) and output

Important Point:
----------------

local.conf file is a very convenient way to override several default configurations over all the Yocto Project's tools.

Essentially, we can change or set any variable, for example, add additional packages to an image file

Though it is convenient, it should be considered as a temporary change as the build/conf/local.conf file is not usually tracked by any source code management system.	
----------------------------------------------


bblayers.conf
------------------

The bblayers.conf file tells BitBake what layers you want considered during the build.

By default, the layers listed in this file include layers minimally needed by the build system

However, you must manually add any custom layers you have created

E.g: BBLAYERS = "\
                                  /home/linuxtrainer/poky/meta \
                                 /home/linuxtrainer/poky/meta-poky \
                                 /home/linuxtrainer/poky/meta-yocto-bsp \
                                 /home/linuxtrainer/poky/meta-mylayer \
                                 "
This example enables four layers, one of which is a custom user defined layer named "meta-mylayer"


----------------------------------------------------
BB_NUMBER_THREADS
-----------------

	Determines the number of tasks that Bitbake will perform in parallel
	Note: These tasks are related to bitbake and nothing related to compiling
	Defaults to the number of CPUs on the system
	$ bitbake -e core-image-minimal | grep ^BB_NUMBER_THREADS=


PARALLEL_MAKE
--------------

	Corresponds to the -j make option
	specifies the number of processes that GNU make can run in parallel on a compilation task
	Defaults to the number of CPUs on the system
	$ bitbake -e core-image-minimal | grep ^PARALLEL_MAKE=

--------------------------------------------------
Images generated by Poky Build
---------------------------------

The build process writes images out to the Build Directory inside the tmp/deploy/images/machine/ folder

1. kernel-image: 
		A kernel binary file
		The KERNEL_IMAGETYPE variable determines the naming scheme for the kernel image file.
		$ bitbake -e core-image-minimal | grep ^KERNEL_IMAGETYPE=

2. root-filesystem-image: 
		Root filesystems for the target device (e.g. *.ext3 or *.bz2 files).
		The IMAGE_FSTYPES variable determines the root filesystem image type
		$ bitbake -e core-image-minimal | grep ^IMAGE_FSTYPES=

3. kernel-modules:
		Tarballs that contain all the modules built for the kernel

4. bootloaders:
		If applicable to the target machine, bootloaders supporting the image.

symlinks
-----------
	symbolic link pointing to the most recently built file for each machine
	These links might be useful for external scripts that need to obtain  latest version of each file





----------------------------------------------------------
Saving Disk Space while building Yocto 
=====================================

Yocto Build System can take a lot of disk space during build. But bitbake provides options to preserve disk space

You can tell bitbake to delete all the source code, build files after building a particular recipe by adding the following line in local.conf file

INHERIT += "rm_work"

Disadvantage: Difficult to debug while build fails of any recipe.

For example, if you want to exclude bitbake deleting source code of a particular package, you can add it in RM_WORK_EXCLUDE += "recipe-name"

E.g: RM_WORK_EXCLUDE += "core-image-minimal"

-----------------------------

